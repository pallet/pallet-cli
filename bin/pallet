#!/usr/bin/env bash

# Ensure this file is executable via `chmod a+x pallet`, then place it
# somewhere on your $PATH, like ~/bin. The rest of Palletingen will be
# installed upon first run into the ~/.pallet/self-installs directory.

export PALLET_VERSION="0.9.0-SNAPSHOT"
PALLET_URL="http://clojars.org/repo/com/palletops/pallet-cli/$PALLET_VERSION/pallet-cli-$PALLET_VERSION-standalone.jar"

if [[ "$OSTYPE" == "cygwin" ]]; then
  cygwin=true
else
  cygwin=false
fi

function download_failed_message {
    echo "Failed to download $1"
    echo "It's possible your HTTP client's certificate store does not have the"
    echo "correct certificate authority needed. This is often caused by an"
    echo "out-of-date version of libssl. Either upgrade it or set HTTP_CLIENT"
    echo "to turn off certificate checks:"
    echo "  export HTTP_CLIENT=\"wget --no-check-certificate -O\" # or"
    echo "  export HTTP_CLIENT=\"curl --insecure -f -L -o\""
    echo "It's also possible that you're behind a firewall haven't yet"
    echo "set HTTP_PROXY and HTTPS_PROXY."
}

function self_install {
  if [ -r "$PALLET_JAR" ]; then
    echo "The self-install jar already exists at $PALLET_JAR."
    echo "If you wish to re-download, delete it and rerun \"$0 self-install\"."
    exit 1
  fi
  echo "Downloading Pallet to $PALLET_JAR now..."
  mkdir -p "$(dirname "$PALLET_JAR")"
  $HTTP_CLIENT "$PALLET_JAR.pending" "$PALLET_URL"
  if [ $? == 0 ]; then
      # TODO: checksum
      mv -f "$PALLET_JAR.pending" "$PALLET_JAR"
  else
      rm "$PALLET_JAR.pending" 2> /dev/null
      download_failed_message "$PALLET_URL"
      exit 1
  fi
}

# Check if running as root
if [ `id -u` -eq 0 ] && [ "$PALLET_ROOT" = "" ]; then
    echo "WARNING: You're currently running as root; probably by accident."
    echo "Press control-C to abort or Enter to continue as root."
    echo "Set PALLET_ROOT to disable this warning."
    read _
fi


# Find the base of the project
# NOT_FOUND=1
# ORIGINAL_PWD="$PWD"
# while [ ! -r "$PWD/project.clj" ] && [ "$PWD" != "/" ] && [ $NOT_FOUND -ne 0 ]
# do
#     cd ..
#     if [ "$(dirname "$PWD")" = "/" ]; then
#         NOT_FOUND=0
#         cd "$ORIGINAL_PWD"
#     fi
# done

# Determine PALLET_HOME
export PALLET_HOME="${PALLET_HOME:-"$HOME/.pallet"}"

if $cygwin; then
    export PALLET_HOME=`cygpath -w "$PALLET_HOME"`
fi

# Where is/will be the pallet jar installed?
PALLET_JAR=${PALLET_JAR:-"$PALLET_HOME/self-installs/pallet-$PALLET_VERSION-standalone.jar"}

## Figure out the script bin

# normalize $0 on certain BSDs
if [ "$(dirname "$0")" = "." ]; then
    SCRIPT="$(which $(basename "$0"))"
else
    SCRIPT="$0"
fi

# resolve symlinks to the script itself portably
while [ -h "$SCRIPT" ] ; do
    ls=`ls -ld "$SCRIPT"`
    link=`expr "$ls" : '.*-> \(.*\)$'`
    if expr "$link" : '/.*' > /dev/null; then
        SCRIPT="$link"
    else
        SCRIPT="$(dirname "$SCRIPT"$)/$link"
    fi
done
# echo SCRIPT=$SCRIPT
BIN_DIR="$(dirname "$SCRIPT")"
# echo BIN_DIR=$BIN_DIR

# capture JVM opts
export PALLET_JVM_OPTS="${PALLET_JVM_OPTS-"-XX:+TieredCompilation -XX:TieredStopAtLevel=1"}"

## Determine how to use CURL or WGET, and wether to use a proxy

# This needs to be defined before we call HTTP_CLIENT below
if [ "$HTTP_CLIENT" = "" ]; then
    if type -p curl >/dev/null 2>&1; then
        if [ "$https_proxy" != "" ]; then
            CURL_PROXY="-x $https_proxy"
        fi
        HTTP_CLIENT="curl $CURL_PROXY -f -L -o"
    else
        HTTP_CLIENT="wget -O"
    fi
fi


if [ ! -r "$PALLET_JAR" -a "$1" != "self-install" ]; then
    self_install
fi


# TODO: explain what to do when Java is missing
export JAVA_CMD="${JAVA_CMD:-"java"}"
export PALLET_JAVA_CMD="${PALLET_JAVA_CMD:-$JAVA_CMD}"

# Support $JAVA_OPTS for backwards-compatibility.
export JVM_OPTS="${JVM_OPTS:-"$JAVA_OPTS"}"


if [ "$1" = "self-install" ]; then
    echo "Manual self-install is deprecated; it will run automatically when necessary."
    self_install
elif [ "$1" = "upgrade" ] || [ "$1" = "downgrade" ]; then
    if [ ! -w "$SCRIPT" ]; then
        echo "You do not have permission to upgrade the installation in $SCRIPT"
        exit 1
    else
        TARGET_VERSION="${2:-master}"
        echo "The script at $SCRIPT will be upgraded to the latest $TARGET_VERSION version."
        echo -n "Do you want to continue [Y/n]? "
        read RESP
        case "$RESP" in
            y|Y|"")
                echo
                echo "Upgrading..."
                TARGET="/tmp/pallet-$$-upgrade"
                if $cygwin; then
                    TARGET=`cygpath -w $TARGET`
                fi
                PALLET_SCRIPT_URL="https://github.com/pallet/pallet/raw/${TARGET_VERSION}/bin/pallet"
                $HTTP_CLIENT "$TARGET" "$PALLET_SCRIPT_URL"
                if [ $? == 0 ]; then
                    mv "$TARGET" "$SCRIPT" && chmod +x "$SCRIPT"
                    exec "$SCRIPT" self-install
                else
                    download_failed_message "$PALLET_SCRIPT_URL"
                fi;;
            *)
                echo "Aborted."
                exit 1;;
        esac
    fi
else
    # Run the pallet jar
    if $cygwin; then
        # When running on Cygwin, use Windows-style paths for java
        ORIGINAL_PWD=`cygpath -w "$ORIGINAL_PWD"`
    fi

    GRENCH="${GRENCH:-grench}"
    if hash grench; then
        # Try and maintain an nrepl server
        PALLET_PORT_FILE=~/.pallet/.nrepl-port
        if [ ! -f ${PALLET_PORT_FILE} ]; then
            echo "Starting pallet server..."
            "$PALLET_JAVA_CMD" -client -cp $PALLET_JAR clojure.main \
               -m nrepl.main --port-file ${PALLET_PORT_FILE} &
            let x=0
            while [ ! -f ${PALLET_PORT_FILE} ]
            do
                if [ 20 -eq $x ]; then
                    echo "Timed out waiting for pallet server to start"
                    exit 1
                fi
                sleep 2
                let x=x+1
            done
        fi
    fi

    if hash grench && [ -e ${PALLET_PORT_FILE} ]; then
        export GRENCH_PORT=$(cat ${PALLET_PORT_FILE})
        grench main pallet.cli $@
    else
        "$PALLET_JAVA_CMD" -client -cp $PALLET_JAR clojure.main -m pallet.cli "$@"
    fi

    EXIT_CODE=$?
    exit $EXIT_CODE

fi
